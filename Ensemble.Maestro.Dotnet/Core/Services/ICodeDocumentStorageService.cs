using Ensemble.Maestro.Dotnet.Core.Agents;

namespace Ensemble.Maestro.Dotnet.Core.Services;

/// <summary>
/// Service interface for storing and managing individual code documents generated by MethodAgents
/// </summary>
public interface ICodeDocumentStorageService
{
    /// <summary>
    /// Store an individual code document generated by a MethodAgent
    /// </summary>
    Task<string> StoreCodeDocumentAsync(string projectId, string codeUnitName, string functionName, 
        AgentExecutionResult result, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get all code documents for a specific project
    /// </summary>
    Task<List<CodeDocument>> GetCodeDocumentsByProjectAsync(string projectId, 
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Get all code documents for a specific code unit within a project
    /// </summary>
    Task<List<CodeDocument>> GetCodeDocumentsByCodeUnitAsync(string projectId, string codeUnitName, 
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Get a specific code document by its ID
    /// </summary>
    Task<CodeDocument?> GetCodeDocumentAsync(string documentId, 
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Aggregate individual code documents into buildable files for BuilderAgent consumption
    /// </summary>
    Task<BuildAggregationResult> AggregateDocumentsForBuildAsync(string projectId, 
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Update the status of a code document (for build tracking)
    /// </summary>
    Task UpdateDocumentStatusAsync(string documentId, string status, string? errorMessage = null, 
        CancellationToken cancellationToken = default);
}