using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Ensemble.Maestro.Dotnet.Core.Data.Entities;

/// <summary>
/// Represents a generated code file within a project
/// </summary>
public class ProjectFile
{
    /// <summary>
    /// Unique identifier for the file
    /// </summary>
    [Key]
    public Guid Id { get; set; } = Guid.NewGuid();

    /// <summary>
    /// ID of the project this file belongs to
    /// </summary>
    [Required]
    public Guid ProjectId { get; set; }

    /// <summary>
    /// ID of the module this file belongs to (if applicable)
    /// </summary>
    public Guid? ModuleId { get; set; }

    /// <summary>
    /// ID of the pipeline execution that generated this file
    /// </summary>
    public Guid? PipelineExecutionId { get; set; }

    /// <summary>
    /// File name with extension
    /// </summary>
    [Required]
    [MaxLength(500)]
    public string FileName { get; set; } = string.Empty;

    /// <summary>
    /// Relative path from project root
    /// </summary>
    [Required]
    [MaxLength(1000)]
    public string RelativePath { get; set; } = string.Empty;

    /// <summary>
    /// Full absolute path to the file
    /// </summary>
    [MaxLength(2000)]
    public string? FullPath { get; set; }

    /// <summary>
    /// File content type/programming language
    /// </summary>
    [Required]
    [MaxLength(100)]
    public string ContentType { get; set; } = "text/plain";

    /// <summary>
    /// Programming language (C#, TypeScript, HTML, CSS, etc.)
    /// </summary>
    [MaxLength(50)]
    public string? Language { get; set; }

    /// <summary>
    /// File category (Component, Service, Model, etc.)
    /// </summary>
    [MaxLength(100)]
    public string? Category { get; set; }

    /// <summary>
    /// The actual file content
    /// </summary>
    [Required]
    public string Content { get; set; } = string.Empty;

    /// <summary>
    /// File size in bytes
    /// </summary>
    public long ContentSize { get; set; }

    /// <summary>
    /// Hash of the content for change detection
    /// </summary>
    [MaxLength(64)]
    public string? ContentHash { get; set; }

    /// <summary>
    /// File version/revision number
    /// </summary>
    public int Version { get; set; } = 1;

    /// <summary>
    /// Current status of the file
    /// </summary>
    [Required]
    [MaxLength(50)]
    public string Status { get; set; } = "Generated";

    /// <summary>
    /// Whether this file was generated by AI
    /// </summary>
    public bool IsGenerated { get; set; } = true;

    /// <summary>
    /// Whether this file can be overwritten during regeneration
    /// </summary>
    public bool IsOverwritable { get; set; } = true;

    /// <summary>
    /// Whether this file is currently part of the active project
    /// </summary>
    public bool IsActive { get; set; } = true;

    /// <summary>
    /// Template used to generate this file (if applicable)
    /// </summary>
    [MaxLength(200)]
    public string? Template { get; set; }

    /// <summary>
    /// Generation prompt or context used to create this file
    /// </summary>
    public string? GenerationPrompt { get; set; }

    /// <summary>
    /// Agent that generated this file
    /// </summary>
    [MaxLength(100)]
    public string? GeneratedByAgent { get; set; }

    /// <summary>
    /// Build order for compilation dependencies
    /// </summary>
    public int? BuildOrder { get; set; }

    /// <summary>
    /// File dependencies as JSON array
    /// </summary>
    public string? Dependencies { get; set; }

    /// <summary>
    /// File metadata as JSON
    /// </summary>
    public string? Metadata { get; set; }

    /// <summary>
    /// File tags for categorization
    /// </summary>
    public string? Tags { get; set; }

    /// <summary>
    /// Quality score (0-100) from validation
    /// </summary>
    public int? QualityScore { get; set; }

    /// <summary>
    /// Validation errors/warnings as JSON
    /// </summary>
    public string? ValidationResults { get; set; }

    /// <summary>
    /// When the file was created
    /// </summary>
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// When the file was last updated
    /// </summary>
    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Who/what last modified this file
    /// </summary>
    [MaxLength(200)]
    public string? LastModifiedBy { get; set; }

    // Navigation properties

    /// <summary>
    /// The project this file belongs to
    /// </summary>
    [ForeignKey(nameof(ProjectId))]
    public virtual Project Project { get; set; } = null!;

    /// <summary>
    /// The module this file belongs to (if applicable)
    /// </summary>
    [ForeignKey(nameof(ModuleId))]
    public virtual Module? Module { get; set; }

    /// <summary>
    /// The pipeline execution that generated this file (if applicable)
    /// </summary>
    [ForeignKey(nameof(PipelineExecutionId))]
    public virtual PipelineExecution? PipelineExecution { get; set; }

    // Computed properties

    /// <summary>
    /// File extension
    /// </summary>
    [NotMapped]
    public string Extension => Path.GetExtension(FileName).ToLowerInvariant();

    /// <summary>
    /// File name without extension
    /// </summary>
    [NotMapped]
    public string NameWithoutExtension => Path.GetFileNameWithoutExtension(FileName);

    /// <summary>
    /// Directory path (relative path without filename)
    /// </summary>
    [NotMapped]
    public string DirectoryPath => Path.GetDirectoryName(RelativePath) ?? string.Empty;

    /// <summary>
    /// Whether this file has validation errors
    /// </summary>
    [NotMapped]
    public bool HasValidationErrors => !string.IsNullOrEmpty(ValidationResults);

    /// <summary>
    /// Whether this file is a source code file
    /// </summary>
    [NotMapped]
    public bool IsSourceCode => 
        Extension is ".cs" or ".ts" or ".js" or ".jsx" or ".tsx" or ".py" or ".java" or ".cpp" or ".h";

    /// <summary>
    /// Whether this file is a configuration file
    /// </summary>
    [NotMapped]
    public bool IsConfiguration => 
        Extension is ".json" or ".xml" or ".yaml" or ".yml" or ".toml" or ".ini" or ".config";

    /// <summary>
    /// Whether this file is a markup/template file
    /// </summary>
    [NotMapped]
    public bool IsMarkup => 
        Extension is ".html" or ".htm" or ".razor" or ".vue" or ".svelte" or ".md";
}