using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Ensemble.Maestro.Dotnet.Core.Data.Entities;

/// <summary>
/// Represents a message exchanged between agents during orchestration (especially group chat patterns)
/// </summary>
public class AgentMessage
{
    /// <summary>
    /// Unique identifier for the message
    /// </summary>
    [Key]
    public Guid Id { get; set; } = Guid.NewGuid();

    /// <summary>
    /// ID of the agent execution this message belongs to
    /// </summary>
    [Required]
    public Guid AgentExecutionId { get; set; }

    /// <summary>
    /// Message sequence number within the execution
    /// </summary>
    public int SequenceNumber { get; set; }

    /// <summary>
    /// Role of the message sender (System, User, Agent)
    /// </summary>
    [Required]
    [MaxLength(50)]
    public string Role { get; set; } = "Agent";

    /// <summary>
    /// Name of the agent that sent this message
    /// </summary>
    [Required]
    [MaxLength(200)]
    public string SenderName { get; set; } = string.Empty;

    /// <summary>
    /// Type of agent that sent this message
    /// </summary>
    [MaxLength(100)]
    public string? SenderType { get; set; }

    /// <summary>
    /// Name of the agent this message is directed to (if specific)
    /// </summary>
    [MaxLength(200)]
    public string? RecipientName { get; set; }

    /// <summary>
    /// The actual message content
    /// </summary>
    [Required]
    public string Content { get; set; } = string.Empty;

    /// <summary>
    /// Message type (Text, FunctionCall, FunctionResult, System, etc.)
    /// </summary>
    [Required]
    [MaxLength(50)]
    public string MessageType { get; set; } = "Text";

    /// <summary>
    /// Message format (Plain, Markdown, JSON, XML, etc.)
    /// </summary>
    [MaxLength(50)]
    public string ContentFormat { get; set; } = "Plain";

    /// <summary>
    /// Message length in characters
    /// </summary>
    public int ContentLength { get; set; }

    /// <summary>
    /// Token count for this message
    /// </summary>
    public int? TokenCount { get; set; }

    /// <summary>
    /// When the message was created
    /// </summary>
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// When the message was sent/processed
    /// </summary>
    public DateTime? SentAt { get; set; }

    /// <summary>
    /// When the message was received/acknowledged
    /// </summary>
    public DateTime? ReceivedAt { get; set; }

    /// <summary>
    /// Processing time for this message in milliseconds
    /// </summary>
    public int? ProcessingTimeMs { get; set; }

    /// <summary>
    /// Whether this message triggered a function call
    /// </summary>
    public bool TriggeredFunctionCall { get; set; } = false;

    /// <summary>
    /// Function call details as JSON (if applicable)
    /// </summary>
    public string? FunctionCallData { get; set; }

    /// <summary>
    /// Function call result as JSON (if applicable)
    /// </summary>
    public string? FunctionCallResult { get; set; }

    /// <summary>
    /// Whether this message was successful
    /// </summary>
    public bool IsSuccessful { get; set; } = true;

    /// <summary>
    /// Error message if processing failed
    /// </summary>
    public string? ErrorMessage { get; set; }

    /// <summary>
    /// Message priority level
    /// </summary>
    [MaxLength(20)]
    public string Priority { get; set; } = "Normal";

    /// <summary>
    /// Thread or conversation ID for grouping related messages
    /// </summary>
    public Guid? ThreadId { get; set; }

    /// <summary>
    /// Parent message ID (for replies or threaded conversations)
    /// </summary>
    public Guid? ParentMessageId { get; set; }

    /// <summary>
    /// Context data associated with this message as JSON
    /// </summary>
    public string? ContextData { get; set; }

    /// <summary>
    /// Metadata about the message as JSON
    /// </summary>
    public string? Metadata { get; set; }

    /// <summary>
    /// Message tags for categorization
    /// </summary>
    public string? Tags { get; set; }

    /// <summary>
    /// Whether this message is part of a retry attempt
    /// </summary>
    public bool IsRetry { get; set; } = false;

    /// <summary>
    /// Retry attempt number (0 for first attempt)
    /// </summary>
    public int RetryAttempt { get; set; } = 0;

    /// <summary>
    /// Orchestration pattern context (GroupChat, Sequential, etc.)
    /// </summary>
    [MaxLength(50)]
    public string? OrchestrationContext { get; set; }

    /// <summary>
    /// Whether this message was generated by AI
    /// </summary>
    public bool IsAIGenerated { get; set; } = true;

    /// <summary>
    /// Confidence score of the message content (0-100)
    /// </summary>
    public int? ConfidenceScore { get; set; }

    /// <summary>
    /// Quality score of the message content (0-100)
    /// </summary>
    public int? QualityScore { get; set; }

    // Navigation properties

    /// <summary>
    /// The agent execution this message belongs to
    /// </summary>
    [ForeignKey(nameof(AgentExecutionId))]
    public virtual AgentExecution AgentExecution { get; set; } = null!;

    /// <summary>
    /// Parent message (for threaded conversations)
    /// </summary>
    [ForeignKey(nameof(ParentMessageId))]
    public virtual AgentMessage? ParentMessage { get; set; }

    /// <summary>
    /// Reply messages (for threaded conversations)
    /// </summary>
    public virtual ICollection<AgentMessage> Replies { get; set; } = new List<AgentMessage>();

    // Computed properties

    /// <summary>
    /// Whether this message has been processed
    /// </summary>
    [NotMapped]
    public bool IsProcessed => SentAt.HasValue;

    /// <summary>
    /// Whether this message has been acknowledged
    /// </summary>
    [NotMapped]
    public bool IsAcknowledged => ReceivedAt.HasValue;

    /// <summary>
    /// Whether this message is a function call
    /// </summary>
    [NotMapped]
    public bool IsFunctionCall => MessageType == "FunctionCall" && !string.IsNullOrEmpty(FunctionCallData);

    /// <summary>
    /// Whether this message is a function result
    /// </summary>
    [NotMapped]
    public bool IsFunctionResult => MessageType == "FunctionResult" && !string.IsNullOrEmpty(FunctionCallResult);

    /// <summary>
    /// Whether this message is a system message
    /// </summary>
    [NotMapped]
    public bool IsSystemMessage => Role == "System" || MessageType == "System";

    /// <summary>
    /// Whether this message is part of a thread
    /// </summary>
    [NotMapped]
    public bool IsThreaded => ThreadId.HasValue || ParentMessageId.HasValue;

    /// <summary>
    /// Processing speed in characters per second (if processed)
    /// </summary>
    [NotMapped]
    public double? ProcessingSpeed
    {
        get
        {
            if (ProcessingTimeMs == null || ProcessingTimeMs == 0) return null;
            return (double)ContentLength / (ProcessingTimeMs.Value / 1000.0);
        }
    }
}