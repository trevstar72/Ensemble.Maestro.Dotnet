@using Ensemble.Maestro.Dotnet.Core.Data.Entities
@using System.Text.Json

<div class="agent-visualization">
    @if (AgentExecution != null)
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div>
                    <h6 class="mb-0">
                        <i class="fas fa-robot text-primary"></i>
                        @AgentExecution.AgentName
                    </h6>
                    <small class="text-muted">@AgentExecution.AgentType</small>
                </div>
                <span class="badge @GetStatusBadgeClass(AgentExecution.Status)">
                    @AgentExecution.Status
                </span>
            </div>
            
            <div class="card-body">
                <!-- Agent Overview -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="agent-metric">
                            <label>Duration</label>
                            <div class="metric-value">
                                @if (AgentExecution.DurationSeconds.HasValue)
                                {
                                    @TimeSpan.FromSeconds(AgentExecution.DurationSeconds.Value).ToString(@"mm\:ss")
                                }
                                else if (AgentExecution.IsRunning)
                                {
                                    @TimeSpan.FromSeconds((DateTime.UtcNow - AgentExecution.StartedAt).TotalSeconds).ToString(@"mm\:ss")
                                    <small class="text-muted">(ongoing)</small>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="agent-metric">
                            <label>Priority</label>
                            <div class="metric-value">
                                <span class="badge @GetPriorityBadgeClass(AgentExecution.Priority)">
                                    @AgentExecution.Priority
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Token and Cost Metrics -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <div class="agent-metric">
                            <label>Input Tokens</label>
                            <div class="metric-value">
                                @(AgentExecution.InputTokens?.ToString("N0") ?? "-")
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="agent-metric">
                            <label>Output Tokens</label>
                            <div class="metric-value">
                                @(AgentExecution.OutputTokens?.ToString("N0") ?? "-")
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="agent-metric">
                            <label>Total Cost</label>
                            <div class="metric-value">
                                @if (AgentExecution.ExecutionCost.HasValue)
                                {
                                    <text>$@AgentExecution.ExecutionCost.Value.ToString("F4")</text>
                                }
                                else
                                {
                                    <text>-</text>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quality Metrics -->
                @if (AgentExecution.QualityScore.HasValue || AgentExecution.ConfidenceScore.HasValue)
                {
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="agent-metric">
                                <label>Quality Score</label>
                                <div class="metric-value">
                                    @if (AgentExecution.QualityScore.HasValue)
                                    {
                                        <div class="d-flex align-items-center">
                                            <span class="me-2">@AgentExecution.QualityScore.Value/100</span>
                                            <div class="progress flex-fill" style="height: 8px;">
                                                <div class="progress-bar @GetQualityProgressClass(AgentExecution.QualityScore.Value)"
                                                     style="width: @(AgentExecution.QualityScore.Value)%"></div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <text>-</text>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="agent-metric">
                                <label>Confidence</label>
                                <div class="metric-value">
                                    @if (AgentExecution.ConfidenceScore.HasValue)
                                    {
                                        <div class="d-flex align-items-center">
                                            <span class="me-2">@AgentExecution.ConfidenceScore.Value%</span>
                                            <div class="progress flex-fill" style="height: 8px;">
                                                <div class="progress-bar bg-info"
                                                     style="width: @(AgentExecution.ConfidenceScore.Value)%"></div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <text>-</text>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Model and Configuration -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="agent-metric">
                            <label>Model</label>
                            <div class="metric-value">
                                @(AgentExecution.ModelUsed ?? "N/A")
                                @if (AgentExecution.Temperature.HasValue)
                                {
                                    <small class="text-muted">@AgentExecution.Temperature.Value temp</small>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="agent-metric">
                            <label>Max Tokens</label>
                            <div class="metric-value">
                                @(AgentExecution.MaxTokens?.ToString("N0") ?? "N/A")
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Performance Metrics -->
                @if (AgentExecution.TokensPerSecond.HasValue)
                {
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="agent-metric">
                                <label>Tokens/Second</label>
                                <div class="metric-value">
                                    @AgentExecution.TokensPerSecond.Value.ToString("F1")
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="agent-metric">
                                <label>Cost/Token</label>
                                <div class="metric-value">
                                    @if (AgentExecution.CostPerToken.HasValue)
                                    {
                                        <text>$@AgentExecution.CostPerToken.Value.ToString("F6")</text>
                                    }
                                    else
                                    {
                                        <text>-</text>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Input/Output Preview -->
                <div class="mb-3">
                    <div class="agent-io-section">
                        <button class="btn btn-outline-secondary btn-sm" type="button" 
                                data-bs-toggle="collapse" data-bs-target="#input-@AgentExecution.Id">
                            <i class="fas fa-chevron-right"></i> Input Prompt
                        </button>
                        <div class="collapse" id="input-@AgentExecution.Id">
                            <div class="card card-body mt-2">
                                <pre class="mb-0">@AgentExecution.InputPrompt</pre>
                            </div>
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(AgentExecution.OutputResponse))
                {
                    <div class="mb-3">
                        <div class="agent-io-section">
                            <button class="btn btn-outline-secondary btn-sm" type="button" 
                                    data-bs-toggle="collapse" data-bs-target="#output-@AgentExecution.Id">
                                <i class="fas fa-chevron-right"></i> Output Response
                            </button>
                            <div class="collapse" id="output-@AgentExecution.Id">
                                <div class="card card-body mt-2">
                                    <pre class="mb-0">@AgentExecution.OutputResponse</pre>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Function Calls -->
                @if (!string.IsNullOrEmpty(AgentExecution.FunctionCalls))
                {
                    <div class="mb-3">
                        <div class="agent-io-section">
                            <button class="btn btn-outline-info btn-sm" type="button" 
                                    data-bs-toggle="collapse" data-bs-target="#functions-@AgentExecution.Id">
                                <i class="fas fa-cog"></i> Function Calls
                            </button>
                            <div class="collapse" id="functions-@AgentExecution.Id">
                                <div class="card card-body mt-2">
                                    <pre class="mb-0">@FormatJson(AgentExecution.FunctionCalls)</pre>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Error Information -->
                @if (!string.IsNullOrEmpty(AgentExecution.ErrorMessage))
                {
                    <div class="alert alert-danger">
                        <h6><i class="fas fa-exclamation-triangle"></i> Error</h6>
                        <pre class="mb-0 error-message">@AgentExecution.ErrorMessage</pre>
                        @if (!string.IsNullOrEmpty(AgentExecution.ErrorStackTrace))
                        {
                            <details class="mt-2">
                                <summary class="cursor-pointer">Stack Trace</summary>
                                <pre class="mt-2 mb-0 small">@AgentExecution.ErrorStackTrace</pre>
                            </details>
                        }
                    </div>
                }

                <!-- Retry Information -->
                @if (AgentExecution.RetryAttempt > 0)
                {
                    <div class="alert alert-warning">
                        <small>
                            <i class="fas fa-redo"></i>
                            Retry attempt @AgentExecution.RetryAttempt of @AgentExecution.MaxRetryAttempts
                        </small>
                    </div>
                }

                <!-- Execution Timeline -->
                <div class="mt-3">
                    <h6>Execution Timeline</h6>
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker bg-primary"></div>
                            <div class="timeline-content">
                                <small class="text-muted">Started</small>
                                <div>@AgentExecution.StartedAt.ToString("HH:mm:ss.fff")</div>
                            </div>
                        </div>
                        @if (AgentExecution.CompletedAt.HasValue)
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker @(AgentExecution.IsFailed ? "bg-danger" : "bg-success")"></div>
                                <div class="timeline-content">
                                    <small class="text-muted">@(AgentExecution.IsFailed ? "Failed" : "Completed")</small>
                                    <div>@AgentExecution.CompletedAt.Value.ToString("HH:mm:ss.fff")</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public AgentExecution? AgentExecution { get; set; }

    private static string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "completed" => "bg-success",
            "running" or "inprogress" => "bg-info",
            "failed" or "error" => "bg-danger",
            "cancelled" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private static string GetPriorityBadgeClass(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "bg-danger",
            "medium" => "bg-warning",
            "low" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private static string GetQualityProgressClass(int score)
    {
        return score switch
        {
            >= 90 => "bg-success",
            >= 70 => "bg-info",
            >= 50 => "bg-warning",
            _ => "bg-danger"
        };
    }

    private static string FormatJson(string? json)
    {
        if (string.IsNullOrEmpty(json)) return "";
        
        try
        {
            var parsed = JsonSerializer.Deserialize<object>(json);
            return JsonSerializer.Serialize(parsed, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return json;
        }
    }
}